/**
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AggregateIndicators from '../model/AggregateIndicators';
import BasicFinancials from '../model/BasicFinancials';
import CompanyExecutive from '../model/CompanyExecutive';
import CompanyProfile from '../model/CompanyProfile';
import CompanyProfile2 from '../model/CompanyProfile2';
import Covid19 from '../model/Covid19';
import CryptoCandles from '../model/CryptoCandles';
import CryptoSymbol from '../model/CryptoSymbol';
import Dividends from '../model/Dividends';
import EarningResult from '../model/EarningResult';
import EarningsCalendar from '../model/EarningsCalendar';
import EarningsCallTranscripts from '../model/EarningsCallTranscripts';
import EarningsCallTranscriptsList from '../model/EarningsCallTranscriptsList';
import EarningsEstimates from '../model/EarningsEstimates';
import EconomicCode from '../model/EconomicCode';
import EconomicData from '../model/EconomicData';
import Filing from '../model/Filing';
import FinancialStatements from '../model/FinancialStatements';
import FinancialsAsReported from '../model/FinancialsAsReported';
import ForexCandles from '../model/ForexCandles';
import ForexSymbol from '../model/ForexSymbol';
import Forexrates from '../model/Forexrates';
import FundOwnership from '../model/FundOwnership';
import IPOCalendar from '../model/IPOCalendar';
import InvestorsOwnership from '../model/InvestorsOwnership';
import MajorDevelopments from '../model/MajorDevelopments';
import News from '../model/News';
import NewsSentiment from '../model/NewsSentiment';
import PatternRecognition from '../model/PatternRecognition';
import PriceTarget from '../model/PriceTarget';
import Quote from '../model/Quote';
import RecommendationTrend from '../model/RecommendationTrend';
import Resistance from '../model/Resistance';
import RevenueEstimates from '../model/RevenueEstimates';
import Split from '../model/Split';
import Stock from '../model/Stock';
import StockCandles from '../model/StockCandles';
import TechnicalIndicators from '../model/TechnicalIndicators';
import TickData from '../model/TickData';
import UpgradeDowngrade from '../model/UpgradeDowngrade';

/**
* Default service.
* @module api/DefaultApi
* @version 1.1.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aggregateIndicator operation.
     * @callback module:api/DefaultApi~aggregateIndicatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregateIndicators} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregate Indicators
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
     * @param {String} symbol symbol
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {module:api/DefaultApi~aggregateIndicatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregateIndicators}
     */
    aggregateIndicator(symbol, resolution, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling aggregateIndicator");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling aggregateIndicator");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AggregateIndicators;
      return this.apiClient.callApi(
        '/scan/technical-indicator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyBasicFinancials operation.
     * @callback module:api/DefaultApi~companyBasicFinancialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicFinancials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic Financials
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {String} metric Metric type. Can be 1 of the following values <code>all, price, valuation, margin</code>
     * @param {module:api/DefaultApi~companyBasicFinancialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicFinancials}
     */
    companyBasicFinancials(symbol, metric, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyBasicFinancials");
      }
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling companyBasicFinancials");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'metric': metric
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicFinancials;
      return this.apiClient.callApi(
        '/stock/metric', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEarnings operation.
     * @callback module:api/DefaultApi~companyEarningsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EarningResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Earnings Surprises
     * Get company historical quarterly earnings surprise going back to 2000.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit number of period returned. Leave blank to get the full history.
     * @param {module:api/DefaultApi~companyEarningsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EarningResult>}
     */
    companyEarnings(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyEarnings");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EarningResult];
      return this.apiClient.callApi(
        '/stock/earnings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEpsEstimates operation.
     * @callback module:api/DefaultApi~companyEpsEstimatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EarningsEstimates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Earnings Estimates
     * Get company's EPS estimates.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {Object} opts Optional parameters
     * @param {String} opts.freq Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>
     * @param {module:api/DefaultApi~companyEpsEstimatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EarningsEstimates}
     */
    companyEpsEstimates(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyEpsEstimates");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'freq': opts['freq']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EarningsEstimates;
      return this.apiClient.callApi(
        '/stock/eps-estimate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyExecutive operation.
     * @callback module:api/DefaultApi~companyExecutiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyExecutive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Company Executive
     * Get a list of company's executives and members of the Board.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {module:api/DefaultApi~companyExecutiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyExecutive}
     */
    companyExecutive(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyExecutive");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanyExecutive;
      return this.apiClient.callApi(
        '/stock/executive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyNews operation.
     * @callback module:api/DefaultApi~companyNewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Company News
     * List latest company news by symbol. This endpoint is only available for US companies.
     * @param {String} symbol Company symbol.
     * @param {Date} from From date <code>YYYY-MM-DD</code>.
     * @param {Date} to To date <code>YYYY-MM-DD</code>.
     * @param {module:api/DefaultApi~companyNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    companyNews(symbol, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyNews");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling companyNews");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling companyNews");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/company-news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyPeers operation.
     * @callback module:api/DefaultApi~companyPeersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Peers
     * Get company peers. Return a list of peers in the same country and GICS sub-industry
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {module:api/DefaultApi~companyPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    companyPeers(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyPeers");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/stock/peers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyProfile operation.
     * @callback module:api/DefaultApi~companyProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Company Profile
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Symbol of the company: AAPL e.g.
     * @param {String} opts.isin ISIN
     * @param {String} opts.cusip CUSIP
     * @param {module:api/DefaultApi~companyProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyProfile}
     */
    companyProfile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'isin': opts['isin'],
        'cusip': opts['cusip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanyProfile;
      return this.apiClient.callApi(
        '/stock/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyProfile2 operation.
     * @callback module:api/DefaultApi~companyProfile2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyProfile2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Company Profile 2
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Symbol of the company: AAPL e.g.
     * @param {String} opts.isin ISIN
     * @param {String} opts.cusip CUSIP
     * @param {module:api/DefaultApi~companyProfile2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyProfile2}
     */
    companyProfile2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'isin': opts['isin'],
        'cusip': opts['cusip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanyProfile2;
      return this.apiClient.callApi(
        '/stock/profile2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyRevenueEstimates operation.
     * @callback module:api/DefaultApi~companyRevenueEstimatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevenueEstimates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revenue Estimates
     * Get company's revenue estimates.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {Object} opts Optional parameters
     * @param {String} opts.freq Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>
     * @param {module:api/DefaultApi~companyRevenueEstimatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevenueEstimates}
     */
    companyRevenueEstimates(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling companyRevenueEstimates");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'freq': opts['freq']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RevenueEstimates;
      return this.apiClient.callApi(
        '/stock/revenue-estimate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the country operation.
     * @callback module:api/DefaultApi~countryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EconomicCode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Country Metadata
     * List all countries and metadata.
     * @param {module:api/DefaultApi~countryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EconomicCode>}
     */
    country(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EconomicCode];
      return this.apiClient.callApi(
        '/country', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the covid19 operation.
     * @callback module:api/DefaultApi~covid19Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Covid19>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COVID-19
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
     * @param {module:api/DefaultApi~covid19Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Covid19>}
     */
    covid19(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Covid19];
      return this.apiClient.callApi(
        '/covid19/us', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoCandles operation.
     * @callback module:api/DefaultApi~cryptoCandlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CryptoCandles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crypto Candles
     * Get candlestick data for crypto symbols.
     * @param {String} symbol Use symbol returned in <code>/crypto/symbol</code> endpoint for this field.
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {Number} from UNIX timestamp. Interval initial value.
     * @param {Number} to UNIX timestamp. Interval end value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format By default, <code>format=json</code>. Strings <code>json</code> and <code>csv</code> are accepted.
     * @param {module:api/DefaultApi~cryptoCandlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CryptoCandles}
     */
    cryptoCandles(symbol, resolution, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling cryptoCandles");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling cryptoCandles");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling cryptoCandles");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling cryptoCandles");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution,
        'from': from,
        'to': to,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CryptoCandles;
      return this.apiClient.callApi(
        '/crypto/candle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoExchanges operation.
     * @callback module:api/DefaultApi~cryptoExchangesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crypto Exchanges
     * List supported crypto exchanges
     * @param {module:api/DefaultApi~cryptoExchangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    cryptoExchanges(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/crypto/exchange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoSymbols operation.
     * @callback module:api/DefaultApi~cryptoSymbolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CryptoSymbol>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crypto Symbol
     * List supported crypto symbols by exchange
     * @param {String} exchange Exchange you want to get the list of symbols from.
     * @param {module:api/DefaultApi~cryptoSymbolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CryptoSymbol>}
     */
    cryptoSymbols(exchange, callback) {
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling cryptoSymbols");
      }

      let pathParams = {
      };
      let queryParams = {
        'exchange': exchange
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CryptoSymbol];
      return this.apiClient.callApi(
        '/crypto/symbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the earningsCalendar operation.
     * @callback module:api/DefaultApi~earningsCalendarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EarningsCalendar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Earnings Calendar
     * Get historical and coming earnings release dating back to 2003. You can setup <a href=\"#webhook\">webhook</a> to receive real-time earnings update.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from From date: 2020-03-15.
     * @param {Date} opts.to To date: 2020-03-16.
     * @param {String} opts.symbol Filter by symbol: AAPL.
     * @param {module:model/AnyType} opts.international Set to <code>true</code> to include international markets. Default value is <code>false</code>
     * @param {module:api/DefaultApi~earningsCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EarningsCalendar}
     */
    earningsCalendar(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'symbol': opts['symbol'],
        'international': opts['international']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EarningsCalendar;
      return this.apiClient.callApi(
        '/calendar/earnings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the economicCode operation.
     * @callback module:api/DefaultApi~economicCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EconomicCode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Economic Code
     * List codes of supported economic data.
     * @param {module:api/DefaultApi~economicCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EconomicCode>}
     */
    economicCode(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EconomicCode];
      return this.apiClient.callApi(
        '/economic/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the economicData operation.
     * @callback module:api/DefaultApi~economicDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EconomicData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Economic Data
     * Get economic data.
     * @param {String} code Economic code.
     * @param {module:api/DefaultApi~economicDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EconomicData}
     */
    economicData(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling economicData");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EconomicData;
      return this.apiClient.callApi(
        '/economic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filings operation.
     * @callback module:api/DefaultApi~filingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Filing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filings
     * List company's filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Symbol. Leave <code>symbol</code>,<code>cik</code> and <code>accessNumber</code> empty to list latest filings.
     * @param {String} opts.cik CIK.
     * @param {String} opts.accessNumber Access number of a specific report you want to retrieve data from.
     * @param {String} opts.form Filter by form. You can use this value <code>NT 10-K</code> to find non-timely filings for a company.
     * @param {Date} opts.from From date: 2020-03-15.
     * @param {Date} opts.to To date: 2020-03-16.
     * @param {module:api/DefaultApi~filingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Filing>}
     */
    filings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'cik': opts['cik'],
        'accessNumber': opts['accessNumber'],
        'form': opts['form'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Filing];
      return this.apiClient.callApi(
        '/stock/filings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financials operation.
     * @callback module:api/DefaultApi~financialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialStatements} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Financial Statements
     * Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {String} statement Statement can take 1 of these values <code>bs, ic, cf</code> for Balance Sheet, Income Statement, Cash Flow respectively.
     * @param {String} freq Frequency can take 1 of these values <code>annual, quarterly, ttm, ytd</code>.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
     * @param {module:api/DefaultApi~financialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialStatements}
     */
    financials(symbol, statement, freq, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling financials");
      }
      // verify the required parameter 'statement' is set
      if (statement === undefined || statement === null) {
        throw new Error("Missing the required parameter 'statement' when calling financials");
      }
      // verify the required parameter 'freq' is set
      if (freq === undefined || freq === null) {
        throw new Error("Missing the required parameter 'freq' when calling financials");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'statement': statement,
        'freq': freq
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinancialStatements;
      return this.apiClient.callApi(
        '/stock/financials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financialsReported operation.
     * @callback module:api/DefaultApi~financialsReportedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialsAsReported} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Financials As Reported
     * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Symbol.
     * @param {String} opts.cik CIK.
     * @param {String} opts.accessNumber Access number of a specific report you want to retrieve financials from.
     * @param {String} opts.freq Frequency. Can be either <code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>.
     * @param {module:api/DefaultApi~financialsReportedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialsAsReported}
     */
    financialsReported(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'cik': opts['cik'],
        'accessNumber': opts['accessNumber'],
        'freq': opts['freq']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FinancialsAsReported;
      return this.apiClient.callApi(
        '/stock/financials-reported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forexCandles operation.
     * @callback module:api/DefaultApi~forexCandlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForexCandles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forex Candles
     * Get candlestick data for forex symbols.
     * @param {String} symbol Use symbol returned in <code>/forex/symbol</code> endpoint for this field.
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {Number} from UNIX timestamp. Interval initial value.
     * @param {Number} to UNIX timestamp. Interval end value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format By default, <code>format=json</code>. Strings <code>json</code> and <code>csv</code> are accepted.
     * @param {module:api/DefaultApi~forexCandlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForexCandles}
     */
    forexCandles(symbol, resolution, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling forexCandles");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling forexCandles");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling forexCandles");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling forexCandles");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution,
        'from': from,
        'to': to,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ForexCandles;
      return this.apiClient.callApi(
        '/forex/candle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forexExchanges operation.
     * @callback module:api/DefaultApi~forexExchangesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forex Exchanges
     * List supported forex exchanges
     * @param {module:api/DefaultApi~forexExchangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    forexExchanges(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/forex/exchange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forexRates operation.
     * @callback module:api/DefaultApi~forexRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Forexrates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forex rates
     * Get rates for all forex pairs. Ideal for currency conversion
     * @param {Object} opts Optional parameters
     * @param {String} opts.base Base currency. Default to EUR.
     * @param {module:api/DefaultApi~forexRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Forexrates}
     */
    forexRates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'base': opts['base']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Forexrates;
      return this.apiClient.callApi(
        '/forex/rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forexSymbols operation.
     * @callback module:api/DefaultApi~forexSymbolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ForexSymbol>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forex Symbol
     * List supported forex symbols.
     * @param {String} exchange Exchange you want to get the list of symbols from.
     * @param {module:api/DefaultApi~forexSymbolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ForexSymbol>}
     */
    forexSymbols(exchange, callback) {
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling forexSymbols");
      }

      let pathParams = {
      };
      let queryParams = {
        'exchange': exchange
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ForexSymbol];
      return this.apiClient.callApi(
        '/forex/symbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fundOwnership operation.
     * @callback module:api/DefaultApi~fundOwnershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FundOwnership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fund Ownership
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit number of results. Leave empty to get the full list.
     * @param {module:api/DefaultApi~fundOwnershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FundOwnership}
     */
    fundOwnership(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling fundOwnership");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FundOwnership;
      return this.apiClient.callApi(
        '/stock/fund-ownership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generalNews operation.
     * @callback module:api/DefaultApi~generalNewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * General News
     * Get latest market news.
     * @param {String} category This parameter can be 1 of the following values <code>general, forex, crypto, merger</code>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.minId Use this field to get only news after this ID. Default to 0
     * @param {module:api/DefaultApi~generalNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    generalNews(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling generalNews");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': category,
        'minId': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investorsOwnership operation.
     * @callback module:api/DefaultApi~investorsOwnershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorsOwnership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Investors Ownership
     * Get a full list of shareholders/investors of a company in descending order of the number of shares held.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit number of results. Leave empty to get the full list.
     * @param {module:api/DefaultApi~investorsOwnershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorsOwnership}
     */
    investorsOwnership(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling investorsOwnership");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvestorsOwnership;
      return this.apiClient.callApi(
        '/stock/investor-ownership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipoCalendar operation.
     * @callback module:api/DefaultApi~ipoCalendarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPOCalendar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IPO Calendar
     * Get recent and coming IPO.
     * @param {Date} from From date: 2020-03-15.
     * @param {Date} to To date: 2020-03-16.
     * @param {module:api/DefaultApi~ipoCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPOCalendar}
     */
    ipoCalendar(from, to, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling ipoCalendar");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling ipoCalendar");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPOCalendar;
      return this.apiClient.callApi(
        '/calendar/ipo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the majorDevelopments operation.
     * @callback module:api/DefaultApi~majorDevelopmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MajorDevelopments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Major Developments
     * List latest major developments of a company going back 20 years with 12M+ data points. This data can be used to highlight the most significant events.
     * @param {String} symbol Company symbol.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from From time: 2020-01-01.
     * @param {Date} opts.to To time: 2020-01-05.
     * @param {module:api/DefaultApi~majorDevelopmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MajorDevelopments}
     */
    majorDevelopments(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling majorDevelopments");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MajorDevelopments;
      return this.apiClient.callApi(
        '/major-development', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsSentiment operation.
     * @callback module:api/DefaultApi~newsSentimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewsSentiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News Sentiment
     * Get company's news sentiment and statistics. This endpoint is only available for US companies.
     * @param {String} symbol Company symbol.
     * @param {module:api/DefaultApi~newsSentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewsSentiment}
     */
    newsSentiment(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling newsSentiment");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NewsSentiment;
      return this.apiClient.callApi(
        '/news-sentiment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternRecognition operation.
     * @callback module:api/DefaultApi~patternRecognitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatternRecognition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pattern Recognition
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     * @param {String} symbol Symbol
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {module:api/DefaultApi~patternRecognitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatternRecognition}
     */
    patternRecognition(symbol, resolution, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling patternRecognition");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling patternRecognition");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PatternRecognition;
      return this.apiClient.callApi(
        '/scan/pattern', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the priceTarget operation.
     * @callback module:api/DefaultApi~priceTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PriceTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price Target
     * Get latest price target consensus.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {module:api/DefaultApi~priceTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PriceTarget}
     */
    priceTarget(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling priceTarget");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PriceTarget;
      return this.apiClient.callApi(
        '/stock/price-target', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quote operation.
     * @callback module:api/DefaultApi~quoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quote
     * <p>Get quote data for stocks. Constant polling is not recommended. Use websocket if you need real-time update.</p><p> This endpoint only provide real-time data for US stocks. Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @param {String} symbol Symbol
     * @param {module:api/DefaultApi~quoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quote}
     */
    quote(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling quote");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quote;
      return this.apiClient.callApi(
        '/quote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationTrends operation.
     * @callback module:api/DefaultApi~recommendationTrendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecommendationTrend>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommendation Trends
     * Get latest analyst recommendation trends for a company.
     * @param {String} symbol Symbol of the company: AAPL.
     * @param {module:api/DefaultApi~recommendationTrendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecommendationTrend>}
     */
    recommendationTrends(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling recommendationTrends");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RecommendationTrend];
      return this.apiClient.callApi(
        '/stock/recommendation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stockCandles operation.
     * @callback module:api/DefaultApi~stockCandlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StockCandles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stock Candles
     * <p>Get candlestick data for stocks going back 25 years.</p><p> This endpoint only provides real-time data for US stocks. Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @param {String} symbol Symbol.
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {Number} from UNIX timestamp. Interval initial value.
     * @param {Number} to UNIX timestamp. Interval end value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format By default, <code>format=json</code>. Strings <code>json</code> and <code>csv</code> are accepted.
     * @param {String} opts.adjusted By default, <code>adjusted=false</code>. Use <code>true</code> to get adjusted data.
     * @param {module:api/DefaultApi~stockCandlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StockCandles}
     */
    stockCandles(symbol, resolution, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling stockCandles");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling stockCandles");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling stockCandles");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling stockCandles");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution,
        'from': from,
        'to': to,
        'format': opts['format'],
        'adjusted': opts['adjusted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StockCandles;
      return this.apiClient.callApi(
        '/stock/candle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stockDividends operation.
     * @callback module:api/DefaultApi~stockDividendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dividends>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dividends
     * Get dividends data for common stocks going back 30 years.
     * @param {String} symbol Symbol.
     * @param {Date} from YYYY-MM-DD.
     * @param {Date} to YYYY-MM-DD.
     * @param {module:api/DefaultApi~stockDividendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dividends>}
     */
    stockDividends(symbol, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling stockDividends");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling stockDividends");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling stockDividends");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Dividends];
      return this.apiClient.callApi(
        '/stock/dividend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stockSplits operation.
     * @callback module:api/DefaultApi~stockSplitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Split>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Splits
     * Get splits data for stocks.
     * @param {String} symbol Symbol.
     * @param {Date} from YYYY-MM-DD.
     * @param {Date} to YYYY-MM-DD.
     * @param {module:api/DefaultApi~stockSplitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Split>}
     */
    stockSplits(symbol, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling stockSplits");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling stockSplits");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling stockSplits");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Split];
      return this.apiClient.callApi(
        '/stock/split', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stockSymbols operation.
     * @callback module:api/DefaultApi~stockSymbolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Stock>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stock Symbol
     * List supported stocks.
     * @param {String} exchange Exchange you want to get the list of symbols from. List of exchanges with fundamental data can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @param {module:api/DefaultApi~stockSymbolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Stock>}
     */
    stockSymbols(exchange, callback) {
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling stockSymbols");
      }

      let pathParams = {
      };
      let queryParams = {
        'exchange': exchange
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stock];
      return this.apiClient.callApi(
        '/stock/symbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stockTick operation.
     * @callback module:api/DefaultApi~stockTickCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TickData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tick Data
     * <p>Get historical tick data for US stocks from all 13 exchanges. Return csv format. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server. Data is updated at the end of each trading day.</p><p>Tick data from 1985 is available for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact us</a> to learn more.</p>
     * @param {String} symbol Symbol.
     * @param {Date} _date Date: 2020-04-02.
     * @param {module:api/DefaultApi~stockTickCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TickData}
     */
    stockTick(symbol, _date, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling stockTick");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling stockTick");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'date': _date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TickData;
      return this.apiClient.callApi(
        '/stock/tick', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportResistance operation.
     * @callback module:api/DefaultApi~supportResistanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resistance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Support/Resistance
     * Get support and resistance levels for a symbol.
     * @param {String} symbol Symbol
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {module:api/DefaultApi~supportResistanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resistance}
     */
    supportResistance(symbol, resolution, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling supportResistance");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling supportResistance");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Resistance;
      return this.apiClient.callApi(
        '/scan/support-resistance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technicalIndicator operation.
     * @callback module:api/DefaultApi~technicalIndicatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnicalIndicators} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Technical Indicators
     * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @param {String} symbol symbol
     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.
     * @param {Number} from UNIX timestamp. Interval initial value.
     * @param {Number} to UNIX timestamp. Interval end value.
     * @param {String} indicator Indicator name. Full list can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @param {Object} opts Optional parameters
     * @param {Object} opts.indicatorSpecificFields Check out <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">this page</a> to see which indicators and params are supported.
     * @param {module:api/DefaultApi~technicalIndicatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnicalIndicators}
     */
    technicalIndicator(symbol, resolution, from, to, indicator, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling technicalIndicator");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling technicalIndicator");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling technicalIndicator");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling technicalIndicator");
      }
      // verify the required parameter 'indicator' is set
      if (indicator === undefined || indicator === null) {
        throw new Error("Missing the required parameter 'indicator' when calling technicalIndicator");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'resolution': resolution,
        'from': from,
        'to': to,
        'indicator': indicator,
        'Indicator specific fields': opts['indicatorSpecificFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnicalIndicators;
      return this.apiClient.callApi(
        '/indicator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transcripts operation.
     * @callback module:api/DefaultApi~transcriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EarningsCallTranscripts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Earnings Call Transcripts
     * <p>Get earnings call transcripts, audio and participants' list. This endpoint is only available for US companies. Earnings call transcripts for international markets are available for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact us</a> to learn more.</p><p>17+ years of data is available with 170,000+ audio which add up to 6TB in size.</p>
     * @param {String} id Transcript's id obtained with <a href=\"#transcripts-list\">Transcripts List endpoint</a>.
     * @param {module:api/DefaultApi~transcriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EarningsCallTranscripts}
     */
    transcripts(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transcripts");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EarningsCallTranscripts;
      return this.apiClient.callApi(
        '/stock/transcripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptsList operation.
     * @callback module:api/DefaultApi~transcriptsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EarningsCallTranscriptsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Earnings Call Transcripts List
     * List earnings call transcripts' metadata. This endpoint is only available for US companies. Earnings call transcripts for international markets are available for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact us</a> to learn more.
     * @param {String} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
     * @param {module:api/DefaultApi~transcriptsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EarningsCallTranscriptsList}
     */
    transcriptsList(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling transcriptsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EarningsCallTranscriptsList;
      return this.apiClient.callApi(
        '/stock/transcripts/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradeDowngrade operation.
     * @callback module:api/DefaultApi~upgradeDowngradeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpgradeDowngrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stock Upgrade/Downgrade
     * Get latest stock upgrade and downgrade.
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
     * @param {Date} opts.from From date: 2000-03-15.
     * @param {Date} opts.to To date: 2020-03-16.
     * @param {module:api/DefaultApi~upgradeDowngradeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpgradeDowngrade>}
     */
    upgradeDowngrade(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UpgradeDowngrade];
      return this.apiClient.callApi(
        '/stock/upgrade-downgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
