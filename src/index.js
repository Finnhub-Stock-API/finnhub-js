/**
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var finnhub = require('index'); // See note below*.
* var xxxSvc = new finnhub.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new finnhub.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new finnhub.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new finnhub.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/

let fetchFn;
try {
  fetchFn = fetch;
} catch (e) {
  fetchFn = require('node-fetch');
}


function simpleRequest(url, params, callback) {
    const query = Object.entries(params)
      .filter(([_, v]) => v !== undefined && v !== null)
      .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)
      .join('&');
    const fullUrl = query ? `${url}?${query}` : url;
    fetchFn(fullUrl)
      .then(async (res) => {
        const text = await res.text();
        let data;
        try {
          data = JSON.parse(text);
        } catch (e) {
          data = text;
        }
        if (!res.ok) {
          callback(data || text || res.statusText, null, res);
        } else {
          callback(null, data, res);
        }
      })
      .catch((err) => callback(err, null, null));
  } 
  

const BASE_URL = 'https://finnhub.io/api/v1';

/**
* Default service.
* @module api/DefaultApi
* @version 1.2.19
*/

export class DefaultApi {

    constructor(apiKey) {
        this.apiKey = apiKey;
    }

    _callApi(path, params, callback) {
        simpleRequest(BASE_URL + path, { ...params, token: this.apiKey }, callback);
    }

    aggregateIndicator(symbol, resolution, callback) {
        this._callApi('/scan/technical-indicator', { symbol, resolution }, callback);
    }


    airlinePriceIndex(airline, from, to, callback) {
        this._callApi('/airline/price-index', { airline, from, to }, callback);
    }


    bondPrice(isin, from, to, callback) {
        this._callApi('/bond/price', { isin, from, to }, callback);
    }


    bondProfile(opts, callback) {
        this._callApi('/bond/profile', opts, callback);
    }


    bondTick(isin, date, limit, skip, exchange, callback) {
        this._callApi('/bond/tick', { isin, date, limit, skip, exchange }, callback);
    }


    bondYieldCurve(code, callback) {
        this._callApi('/bond/yield-curve', { code }, callback);
    }


    companyBasicFinancials(symbol, metric, callback) {
        this._callApi('/stock/metric', { symbol, metric }, callback);
    }


    companyEarnings(symbol, opts, callback) {
        this._callApi('/stock/earnings', { symbol, limit: opts['limit'] }, callback);
    }


    companyEarningsQualityScore(symbol, freq, callback) {
        this._callApi('/stock/earnings-quality-score', { symbol, freq }, callback);
    }

    companyEbitEstimates(symbol, opts, callback) {
        this._callApi('/stock/ebit-estimate', { symbol, freq: opts['freq'] }, callback);
    }

    companyEbitdaEstimates(symbol, opts, callback) {
        this._callApi('/stock/ebitda-estimate', { symbol, freq: opts['freq'] }, callback);
    }

    companyEpsEstimates(symbol, opts, callback) {
        this._callApi('/stock/eps-estimate', { symbol, freq: opts['freq'] }, callback);
    }

    companyEsgScore(symbol, callback) {
        this._callApi('/stock/esg', { symbol }, callback);
    }

    companyExecutive(symbol, callback) {
        this._callApi('/stock/executive', { symbol }, callback);
    }

    companyHistoricalEsgScore(symbol, callback) {
        this._callApi('/stock/historical-esg', { symbol }, callback);
    }


    companyNews(symbol, from, to, callback) {
        this._callApi('/company-news', { symbol, from, to }, callback);
    }


    companyPeers(symbol, opts, callback) {
        this._callApi('/stock/peers', { symbol, grouping: opts['grouping'] }, callback);
    }


    companyProfile(opts, callback) {
        this._callApi('/stock/profile', opts, callback);
    }


    companyProfile2(opts, callback) {
        this._callApi('/stock/profile2', opts, callback);
    }


    companyRevenueEstimates(symbol, opts, callback) {
        this._callApi('/stock/revenue-estimate', { symbol, freq: opts['freq'] }, callback);
    }


    congressionalTrading(symbol, from, to, callback) {
        this._callApi('/stock/congressional-trading', { symbol, from, to }, callback);
    }

    country(callback) {
        this._callApi('/country', {}, callback);
    }

    covid19(callback) {
        this._callApi('/covid19/us', {}, callback);
    }


    cryptoCandles(symbol, resolution, from, to, callback) {
        this._callApi('/crypto/candle', { symbol, resolution, from, to }, callback);
    }


    cryptoExchanges(callback) {
        this._callApi('/crypto/exchange', {}, callback);
    }


    cryptoProfile(symbol, callback) {
        this._callApi('/crypto/profile', { symbol }, callback);
    }


    cryptoSymbols(exchange, callback) {
        this._callApi('/crypto/symbol', { exchange }, callback);
    }


    earningsCalendar(opts, callback) {
        this._callApi('/calendar/earnings', { from: opts['from'], to: opts['to'], symbol: opts['symbol'], international: opts['international'] }, callback);
    }


    economicCalendar(opts, callback) {
        this._callApi('/calendar/economic', { from: opts['from'], to: opts['to'] }, callback);
    }


    economicCode(callback) {
        this._callApi('/economic/code', {}, callback);
    }


    economicData(code, callback) {
        this._callApi('/economic', { code }, callback);
    }


    etfsCountryExposure(opts, callback) {
        this._callApi('/etf/country', { symbol: opts['symbol'], isin: opts['isin'] }, callback);
    }

    etfsHoldings(opts, callback) {
        this._callApi('/etf/holdings', { symbol: opts['symbol'], isin: opts['isin'], skip: opts['skip'], date: opts['date'] }, callback);
    }

    etfsProfile(opts, callback) {
        this._callApi('/etf/profile', { symbol: opts['symbol'], isin: opts['isin'] }, callback);
    }

    etfsSectorExposure(opts, callback) {
        this._callApi('/etf/sector', { symbol: opts['symbol'], isin: opts['isin'] }, callback);
    }

    fdaCommitteeMeetingCalendar(callback) {
        this._callApi('/fda-advisory-committee-calendar', {}, callback);
    }


    filings(opts, callback) {
        this._callApi('/stock/filings', { symbol: opts['symbol'], cik: opts['cik'], accessNumber: opts['accessNumber'], form: opts['form'], from: opts['from'], to: opts['to'] }, callback);
    }


    filingsSentiment(accessNumber, callback) {
        this._callApi('/stock/filings-sentiment', { accessNumber }, callback);
    }


    financials(symbol, statement, freq, callback) {
        this._callApi('/stock/financials', { symbol, statement, freq }, callback);
    }


    financialsReported(opts, callback) {
        this._callApi('/stock/financials-reported', { symbol: opts['symbol'], cik: opts['cik'], accessNumber: opts['accessNumber'], freq: opts['freq'], from: opts['from'], to: opts['to'] }, callback);
    }


    forexCandles(symbol, resolution, from, to, callback) {
        this._callApi('/forex/candle', { symbol, resolution, from, to }, callback);
    }


    forexExchanges(callback) {
        this._callApi('/forex/exchange', {}, callback);
    }


    forexRates(opts, callback) {
        this._callApi('/forex/rates', { base: opts['base'], date: opts['date'] }, callback);
    }


    forexSymbols(exchange, callback) {
        this._callApi('/forex/symbol', { exchange }, callback);
    }


    fundOwnership(symbol, opts, callback) {
        this._callApi('/stock/fund-ownership', { symbol, limit: opts['limit'] }, callback);
    }


    historicalEmployeeCount(symbol, from, to, callback) {
        this._callApi('/stock/historical-employee-count', { symbol, from, to }, callback);
    }


    historicalMarketCap(symbol, from, to, callback) {
        this._callApi('/stock/historical-market-cap', { symbol, from, to }, callback);
    }


    indicesConstituents(symbol, callback) {
        this._callApi('/index/constituents', { symbol }, callback);
    }


    indicesHistoricalConstituents(symbol, callback) {
        this._callApi('/index/historical-constituents', { symbol }, callback);
    }

    insiderSentiment(symbol, from, to, callback) {
        this._callApi('/stock/insider-sentiment', { symbol, from, to }, callback);
    }

    insiderTransactions(symbol, opts, callback) {
        this._callApi('/stock/insider-transactions', { symbol, from: opts['from'], to: opts['to'] }, callback);
    }


    institutionalOwnership(symbol, cusip, from, to, callback) {
        this._callApi('/institutional/ownership', { symbol, cusip, from, to }, callback);
    }


    institutionalPortfolio(cik, from, to, callback) {
        this._callApi('/institutional/portfolio', { cik, from, to }, callback);
    }


    institutionalProfile(opts, callback) {
        this._callApi('/institutional/profile', opts, callback);
    }


    internationalFilings(opts, callback) {
        this._callApi('/stock/international-filings', { symbol: opts['symbol'], country: opts['country'], from: opts['from'], to: opts['to'] }, callback);
    }


    investmentThemes(theme, callback) {
        this._callApi('/stock/investment-theme', { theme }, callback);
    }


    ipoCalendar(from, to, callback) {
        this._callApi('/calendar/ipo', { from, to }, callback);
    }

    /**
     * ISIN Change
     * Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.
     * @param {String} from From date <code>YYYY-MM-DD</code>.
     * @param {String} to To date <code>YYYY-MM-DD</code>.
     * @param {module:api/DefaultApi~isinChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsinChange}
     */
    isinChange(from, to, callback) {
        this._callApi('/ca/isin-change', { from, to }, callback);
    }


    marketHoliday(exchange, callback) {
        this._callApi('/stock/market-holiday', { exchange }, callback);
    }


    marketNews(category, opts, callback) {
        this._callApi('/news', { category, minId: opts['minId'] }, callback);
    }


    marketStatus(exchange, callback) {
        this._callApi('/stock/market-status', { exchange }, callback);
    }


    mutualFundCountryExposure(opts, callback) {
        this._callApi('/mutual-fund/country', { symbol: opts['symbol'], isin: opts['isin'] }, callback);
    }


    mutualFundEet(isin, callback) {
        this._callApi('/mutual-fund/eet', { isin }, callback);
    }


    mutualFundEetPai(isin, callback) {
        this._callApi('/mutual-fund/eet-pai', { isin }, callback);
    }


    mutualFundHoldings(opts, callback) {
        this._callApi('/mutual-fund/holdings', { symbol: opts['symbol'], isin: opts['isin'], skip: opts['skip'] }, callback);
    }


    mutualFundProfile(opts, callback) {
        this._callApi('/mutual-fund/profile', opts, callback);
    }


    mutualFundSectorExposure(opts, callback) {
        this._callApi('/mutual-fund/sector', opts, callback);
    }


    newsSentiment(symbol, callback) {
        this._callApi('/news-sentiment', { symbol }, callback);
    }


    ownership(symbol, opts, callback) {
        this._callApi('/stock/ownership', { symbol, ...opts }, callback);
    }


    patternRecognition(symbol, resolution, callback) {
        this._callApi('/scan/pattern', { symbol, resolution }, callback);
    }


    pressReleases(symbol, opts, callback) {
        this._callApi('/press-releases', { symbol, from: opts['from'], to: opts['to'] }, callback);
    }


    priceMetrics(symbol, opts, callback) {
        this._callApi('/stock/price-metric', { symbol, date: opts['date'] }, callback);
    }


    priceTarget(symbol, callback) {
        this._callApi('/stock/price-target', { symbol }, callback);
    }


    quote(symbol, callback) {
        this._callApi('/quote', { symbol }, callback);
    }


    recommendationTrends(symbol, callback) {
        this._callApi('/stock/recommendation', { symbol }, callback);
    }


    revenueBreakdown(opts, callback) {
        this._callApi('/stock/revenue-breakdown', { symbol: opts['symbol'], cik: opts['cik'] }, callback);
    }


    sectorMetric(region, callback) {
        this._callApi('/sector/metrics', { region }, callback);
    }


    similarityIndex(opts, callback) {
        this._callApi('/stock/similarity-index', { ...opts }, callback);
    }


    socialSentiment(symbol, opts, callback) {
        this._callApi('/stock/social-sentiment', { symbol, from: opts['from'], to: opts['to'] }, callback);
    }


    stockCandles(symbol, resolution, from, to, callback) {
        this._callApi('/stock/candle', { symbol, resolution, from, to }, callback);
    }


    stockDividends(symbol, from, to, callback) {
        this._callApi('/stock/dividend', { symbol, from, to }, callback);
    }


    stockLobbying(symbol, from, to, callback) {
        this._callApi('/stock/lobbying', { symbol, from, to }, callback);
    }


    stockNbbo(symbol, date, limit, skip, callback) {
        this._callApi('/stock/bbo', { symbol, date, limit, skip }, callback);
    }


    stockSplits(symbol, from, to, callback) {
        this._callApi('/stock/split', { symbol, from, to }, callback);
    }


    stockSymbols(exchange, opts, callback) {
        this._callApi('/stock/symbol', { exchange, mic: opts['mic'], securityType: opts['securityType'], currency: opts['currency'] }, callback);
    }


    stockTick(symbol, date, limit, skip, callback) {
        this._callApi('/stock/tick', { symbol, date, limit, skip }, callback);
    }


    stockUsaSpending(symbol, from, to, callback) {
        this._callApi('/stock/usa-spending', { symbol, from, to }, callback);
    }


    stockUsptoPatent(symbol, from, to, callback) {
        this._callApi('/stock/uspto-patent', { symbol, from, to }, callback);
    }


    stockVisaApplication(symbol, from, to, callback) {
        this._callApi('/stock/visa-application', { symbol, from, to }, callback);
    }


    supportResistance(symbol, resolution, callback) {
        this._callApi('/scan/support-resistance', { symbol, resolution }, callback);
    }


    symbolChange(from, to, callback) {
        this._callApi('/ca/symbol-change', { from, to }, callback);
    }


    symbolSearch(q, opts, callback) {
        this._callApi('/search', { q, exchange: opts['exchange'] }, callback);
    }


    technicalIndicator(symbol, resolution, from, to, indicator, opts, callback) {
        this._callApi('/indicator', { symbol, resolution, from, to, indicator, ...opts }, callback);
    }

    transcripts(id, callback) {
        this._callApi('/stock/transcripts', { id }, callback);
    }

    transcriptsList(symbol, callback) {
        this._callApi('/stock/transcripts/list', { symbol }, callback);
    }

    upgradeDowngrade(opts, callback) {
        this._callApi('/stock/upgrade-downgrade', { ...opts }, callback);
    }
}

// For CommonJS compatibility
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = { DefaultApi };
}
