/**
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedditSentimentContent model module.
 * @module model/RedditSentimentContent
 * @version 1.2.13
 */
class RedditSentimentContent {
    /**
     * Constructs a new <code>RedditSentimentContent</code>.
     * @alias module:model/RedditSentimentContent
     */
    constructor() { 
        
        RedditSentimentContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedditSentimentContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedditSentimentContent} obj Optional instance to populate.
     * @return {module:model/RedditSentimentContent} The populated <code>RedditSentimentContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedditSentimentContent();

            if (data.hasOwnProperty('mention')) {
                obj['mention'] = ApiClient.convertToType(data['mention'], 'Number');
            }
            if (data.hasOwnProperty('positiveMention')) {
                obj['positiveMention'] = ApiClient.convertToType(data['positiveMention'], 'Number');
            }
            if (data.hasOwnProperty('negativeMention')) {
                obj['negativeMention'] = ApiClient.convertToType(data['negativeMention'], 'Number');
            }
            if (data.hasOwnProperty('positiveScore')) {
                obj['positiveScore'] = ApiClient.convertToType(data['positiveScore'], 'Number');
            }
            if (data.hasOwnProperty('negativeScore')) {
                obj['negativeScore'] = ApiClient.convertToType(data['negativeScore'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('atTime')) {
                obj['atTime'] = ApiClient.convertToType(data['atTime'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Number of mentions
 * @member {Number} mention
 */
RedditSentimentContent.prototype['mention'] = undefined;

/**
 * Number of positive mentions
 * @member {Number} positiveMention
 */
RedditSentimentContent.prototype['positiveMention'] = undefined;

/**
 * Number of negative mentions
 * @member {Number} negativeMention
 */
RedditSentimentContent.prototype['negativeMention'] = undefined;

/**
 * Positive score. Range 0-1
 * @member {Number} positiveScore
 */
RedditSentimentContent.prototype['positiveScore'] = undefined;

/**
 * Negative score. Range 0-1
 * @member {Number} negativeScore
 */
RedditSentimentContent.prototype['negativeScore'] = undefined;

/**
 * Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative
 * @member {Number} score
 */
RedditSentimentContent.prototype['score'] = undefined;

/**
 * Period.
 * @member {String} atTime
 */
RedditSentimentContent.prototype['atTime'] = undefined;






export default RedditSentimentContent;

